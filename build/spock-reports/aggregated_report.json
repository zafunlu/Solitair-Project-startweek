{"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":22,"errors":0,"skipped":0,"totalRuns":57,"successRate":0.6140350877192983,"time":549}},"nl.quintor.solitaire.game.GameStateControllerSpec":{"executedFeatures":["A bonus should be given of #expectedTimeScore when testing: #testCase","A penalty should be applied of #expectedPenalty based on a game duration of #duration","Win detection should return #expectedResult when testing: #testCase","init should create a valid game state"],"ignoredFeatures":[],"stats":{"failures":7,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.36363636363636365,"time":181}},"nl.quintor.solitaire.game.moves.CycleStockSpec":{"executedFeatures":["Given a stock having: #stock and a waste having: #waste cycling #cyclingTimes times should result in stock having: #resultingStock\n         waste having: #resultingWaste and cycle count of #cycleCount","Testing Cycle with empty stock and waste","Testing Cycle with empty waste","Testing Cycle with empty waste and multiple cards in stock"],"ignoredFeatures":[],"stats":{"failures":7,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.0,"time":132}},"nl.quintor.solitaire.game.moves.DummyMoveSpec":{"executedFeatures":["Dummy move should throw #exception.getSimpleName() with message #exceptionMessage given a player input of #playerInput","Dummy toString method should return \"Dummy\""],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":3,"successRate":0.0,"time":22}},"nl.quintor.solitaire.game.moves.HelpMoveSpec":{"executedFeatures":["Help move should return help text","Help move toString should return 'H\u0332elp'"],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":2,"successRate":0.0,"time":8}},"nl.quintor.solitaire.game.moves.MoveCardSpec":{"executedFeatures":["[INITIALIZATION ERROR] Given a invalid move: #move game state is not changed when testing: #testCase","[INITIALIZATION ERROR] Given a valid move #move gamestate is changed testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":2,"skipped":0,"totalRuns":2,"successRate":0.0,"time":38}},"nl.quintor.solitaire.game.moves.QuitMoveSpec":{"executedFeatures":["Quit toString method should return \"Q\u0332uit\"","When quit move is called move return \"Game over\" and gamestate.gameLost is true"],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":2,"successRate":0.0,"time":17}},"nl.quintor.solitaire.game.moves.RevertMoveSpec":{"executedFeatures":["Given a game with multiple moves played last move can be reverted","Given a game with one move played move can be reverted","Given a game with zero move played cycle one time, cycle can be reverted","Given a waste with one card cycle count is resetted and cards are back to waste","Revert move should throw MoveException when no previous moves have been played"],"ignoredFeatures":[],"stats":{"failures":1,"errors":4,"skipped":0,"totalRuns":5,"successRate":0.0,"time":20}},"nl.quintor.solitaire.ui.cli.GameStateParserSpec":{"executedFeatures":["PadNAdd should add padding with testcase : #testCase","cardStringOrNull should return #expectedResult when testing : #testCase","parseGameState should return a string representation of the game state for a new game","printRow should return #expectedResult when testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":9,"errors":1,"skipped":0,"totalRuns":12,"successRate":0.16666666666666666,"time":110}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":22,"errors":0,"skipped":0,"totalRuns":57,"successRate":0.6140350877192983,"time":667}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"successRate":0.0,"time":215}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":22,"errors":0,"skipped":0,"totalRuns":57,"successRate":0.6140350877192983,"time":675}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":22,"errors":0,"skipped":0,"totalRuns":57,"successRate":0.6140350877192983,"time":581}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":22,"errors":0,"skipped":0,"totalRuns":57,"successRate":0.6140350877192983,"time":653}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"successRate":1.0,"time":90}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.25,"time":174}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.25,"time":163}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.5,"time":137}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.75,"time":323}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.75,"time":258}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.75,"time":240}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.75,"time":249}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.75,"time":296}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.75,"time":263}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.75,"time":374}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.75,"time":314}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"successRate":1.0,"time":116}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.75,"time":257}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.75,"time":242}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.75,"time":252}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.75,"time":290}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":3,"successRate":0.0,"time":266}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":3,"successRate":0.0,"time":214}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.75,"time":260}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.5,"time":249}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"successRate":1.0,"time":130}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":21,"errors":0,"skipped":0,"totalRuns":57,"successRate":0.631578947368421,"time":587}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":21,"errors":0,"skipped":0,"totalRuns":57,"successRate":0.631578947368421,"time":626}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":12,"errors":0,"skipped":0,"totalRuns":16,"successRate":0.25,"time":336}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":4,"errors":0,"skipped":0,"totalRuns":16,"successRate":0.75,"time":314}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":8,"errors":0,"skipped":0,"totalRuns":16,"successRate":0.5,"time":313}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":4,"errors":0,"skipped":0,"totalRuns":16,"successRate":0.75,"time":309}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":4,"errors":0,"skipped":0,"totalRuns":16,"successRate":0.75,"time":316}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":4,"errors":0,"skipped":0,"totalRuns":16,"successRate":0.75,"time":297}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":8,"errors":0,"skipped":0,"totalRuns":16,"successRate":0.5,"time":275}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":4,"errors":0,"skipped":0,"totalRuns":16,"successRate":0.75,"time":406}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":16,"successRate":1.0,"time":203}}}