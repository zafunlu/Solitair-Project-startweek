{"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":2,"successRate":0.0,"time":68}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":22,"errors":0,"skipped":0,"totalRuns":57,"successRate":0.6140350877192983,"time":432}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"successRate":1.0,"time":96}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":22,"errors":0,"skipped":0,"totalRuns":57,"successRate":0.6140350877192983,"time":357}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput with #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"successRate":0.0,"time":55}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput with #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"successRate":1.0,"time":48}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput with #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"successRate":1.0,"time":49}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput with #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"successRate":1.0,"time":79}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput with #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.25,"time":124}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput with #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.5,"time":113}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput with #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.75,"time":162}}}